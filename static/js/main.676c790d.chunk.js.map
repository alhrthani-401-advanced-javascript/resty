{"version":3,"sources":["logo.svg","components/header.jsx","components/main.jsx","components/footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Main","props","setMethod","e","setState","methodPlaceholder","target","value","setUrl","urlPlaceholder","showUrlAndMethod","preventDefault","url","state","method","placeholder","onChange","this","type","name","htmlFor","onClick","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,gJCM5BC,G,oCAJA,WACX,OAAQ,4BAAQC,UAAU,cAAlB,IAAgC,wC,4BCoD7BC,E,kDApDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,UAAY,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,kBAAmBF,EAAEG,OAAOC,SAV1C,EAWnBC,OAAS,SAAAL,GAAC,OAAI,EAAKC,SAAS,CAAEK,eAAgBN,EAAEG,OAAOC,SAXpC,EAanBG,iBAAmB,SAAAP,GACjBA,EAAEQ,iBACF,EAAKP,SAAS,CAAEQ,IAAK,EAAKC,MAAMJ,iBAChC,EAAKL,SAAS,CAAEU,OAAQ,EAAKD,MAAMR,qBAdnC,EAAKQ,MAAQ,CACXC,OAAQ,GACRF,IAAK,GACLH,eAAgB,GAChBJ,kBAAmB,IANJ,E,qDAoBjB,OACE,6BACE,6BAASN,UAAU,QACnB,kCACE,uCACA,2BAAOgB,YAAY,UAAUC,SAAUC,KAAKT,UAG9C,kCACE,0CACA,2BAAOU,KAAK,QAAQX,MAAM,MAAMY,KAAK,SAASH,SAAUC,KAAKf,YAC7D,2BAAOkB,QAAQ,OAAf,OACA,2BAAOF,KAAK,QAAQX,MAAM,OAAOY,KAAK,SAASH,SAAUC,KAAKf,YAC9D,2BAAOkB,QAAQ,QAAf,QACA,2BAAOF,KAAK,QAAQX,MAAM,MAAMY,KAAK,SAASH,SAAUC,KAAKf,YAC7D,2BAAOkB,QAAQ,OAAf,OACA,2BAAOF,KAAK,QAAQX,MAAM,SAASY,KAAK,SAASH,SAAUC,KAAKf,YAChE,2BAAOkB,QAAQ,UAAf,WAEF,4BAAQC,QAASJ,KAAKP,kBAAtB,OAGA,6BACE,8BAAOO,KAAKJ,MAAMC,OAAlB,QACA,8BAAOG,KAAKJ,MAAMD,W,GA7CTU,IAAMC,WCIVC,EAHA,kBAAM,4BAAQzB,UAAU,cAAlB,yBCyBN0B,MAbf,WACE,OAEE,yBAAK1B,UAAU,OACV,kBAAC,EAAD,MACA,8BACC,kBAAC,EAAD,OAED,kBAAC,EAAD,QCXW2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.676c790d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Header = () => {\n    return (<header className=\"App-header\"> <h1>RESTy</h1></header>)\n};\n\nexport default Header;","import React from 'react';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      method: '',\n      url: '',\n      urlPlaceholder: '',\n      methodPlaceholder: ''\n    }\n  }\n\n  setMethod = e => this.setState({ methodPlaceholder: e.target.value })\n  setUrl = e => this.setState({ urlPlaceholder: e.target.value });\n\n  showUrlAndMethod = e => {\n    e.preventDefault();\n    this.setState({ url: this.state.urlPlaceholder })\n    this.setState({ method: this.state.methodPlaceholder })\n  };\n\n  render() {\n    return (\n      <div >\n        <section className=\"main\">\n        <fieldset>\n          <legend>URL</legend>\n          <input placeholder=\"http://\" onChange={this.setUrl} />\n        </fieldset>\n\n        <fieldset>\n          <legend>Method</legend>\n          <input type=\"radio\" value=\"GET\" name=\"method\" onChange={this.setMethod} />\n          <label htmlFor=\"GET\">GET</label>\n          <input type=\"radio\" value=\"POST\" name=\"method\" onChange={this.setMethod} />\n          <label htmlFor=\"POST\">POST</label>\n          <input type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.setMethod} />\n          <label htmlFor=\"PUT\">PUT</label>\n          <input type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.setMethod} />\n          <label htmlFor=\"DELETE\">DELETE</label>\n        </fieldset>\n        <button onClick={this.showUrlAndMethod}>Go</button>\n        </section>\n\n        <div>\n          <span>{this.state.method}&nbsp;</span>\n          <span>{this.state.url}</span>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Main;\n\n\n\n","import React from 'react';\n\n\nconst Footer = () => <footer className=\"App-footer\"> & copy 2020 401 d4 </footer>\n\n\nexport default Footer;","import React from 'react';\nimport logo from './logo.svg';\n\n\n\nimport './style/base.scss';\nimport './style/header.scss';\nimport './style/main.scss';\nimport './style/footer.scss';\n\nimport Header from './components/header';\nimport Main from './components/main';\nimport Footer from './components/footer';\n\n\nfunction App() {\n  return (\n     \n    <div className=\"App\">\n         <Header/>\n         <main>\n          <Main/>\n         </main>\n         <Footer/>\n     </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}